#   ____  _  __
#  / ___|| |/ /__ _ _ __ _ __ ___   __ _
#  \___ \| ' // _` | '__| '_ ` _ \ / _` |
#   ___) | . \ (_| | |  | | | | | | (_| |
#  |____/|_|\_\__,_|_|  |_| |_| |_|\__,_|
#
# Yet another carma bot for telegram
# Copyright (C) 2020 Nikita Serba. All rights reserved
# https://github.com/sandsbit/skarmabot
#
# SKarma is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License.
#
# SKarma is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with SKarma. If not, see <https://www.gnu.org/licenses/>.

from telegram import LabeledPrice

from telegram.ext import ConversationHandler

from skarma.utils.errorm import catch_error
from skarma.donate_info import DonateInfo

AMOUNT = range(1)

_donate_info = DonateInfo()


@catch_error
def donate_ask_d(update, context):
    return donate_ask(update, context, True)


@catch_error
def donate_ask(update, context, debug=False):
    enabled = _donate_info.test_enabled if debug else _donate_info.enabled

    if 'group' in update.effective_chat.type:
        update.message.reply_text('–£–≤—ã, –¥–æ–Ω–∞—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º')
        return ConversationHandler.END

    if not enabled:
        update.message.reply_text('–£–≤—ã, –¥–æ–Ω–∞—Ç–∏–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!')
        return ConversationHandler.END

    update.message.reply_text('–û, –≤—ã —Ä–µ—à–∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–æ–Ω–∞—Ç–∏–∫? –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏.'
                              ' –°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –Ω–∞–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã'
                              ' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)')

    return AMOUNT


@catch_error
def donate_d(update, context):
    return donate(update, context, True)


@catch_error
def donate(update, context, debug=False):
    chat_id = update.effective_chat.id
    text = update.message.text

    enabled = _donate_info.test_enabled if debug else _donate_info.enabled
    payload = _donate_info.test_payload if debug else _donate_info.payload
    provider_token = _donate_info.test_provider_token if debug else _donate_info.provider_token
    start_parameter = _donate_info.test_start_parameter if debug else _donate_info.start_parameter

    assert enabled

    try:
        price = float(text.replace(',', '.'))
    except ValueError:
        update.message.reply_text('–≠–π, —Ç–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –Ω–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        return AMOUNT

    if price < 1:
        update.message.reply_text('–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–º–∞, –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–æ–Ω–∞—Ç—ã –æ—Ç $1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')
        return AMOUNT
    elif price > 10000:
        update.message.reply_text('–û–≥–æ, –∫–∞–∫–æ—Ç–µ–ª–µ–π –±–æ–ª—å—à–æ–π! –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –º–∞–∫—Å–∏–º—É–º $10,000. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')
        return AMOUNT

    title = "–£—Ä—è, –¥–æ–Ω–∞—Ç–∏–∫!"
    description = "–ü—Ä–æ—Å–ø–æ–Ω—Å–∏—Ä—É–π—Ç–µ –æ–ø–ª–∞—Ç—É —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫–æ—Ñ–µ –≥–æ–ª–æ–¥–∞—é—â–µ–º—É –∞–≤—Ç–æ—Ä—É –±–æ—Ç–∞"
    currency = "USD"
    # price * 100 so as to include 2 decimal points
    prices = [LabeledPrice("Donate", int(price * 100))]

    context.bot.send_invoice(chat_id, title, description, payload,
                             provider_token, start_parameter, currency, prices)

    return ConversationHandler.END


@catch_error
def cancel(update, _):
    update.message.reply_text('–û–∫–µ(')

    return ConversationHandler.END


@catch_error
def finish_donate(update, _):
    update.message.reply_text("–ü–∞—Å–∏–± –∑–∞ –¥–æ–Ω–∞—Ç ü•∞ü•∞")
